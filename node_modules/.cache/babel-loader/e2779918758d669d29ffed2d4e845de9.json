{"ast":null,"code":"var _jsxFileName = \"/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js\";\nimport React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\"; // change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\nconst style = {\n  calendarContainer: {\n    textAlign: 'center',\n    width: '100%',\n    padding: '3%',\n    marginTop: '7%'\n  },\n  calendar: {\n    height: '55vh',\n    fontSize: 15\n  }\n};\n/**\n * Component updates every minute\n */\n\nexport default class CalendarViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateCalendarEvents(), 60 * 1000);\n    this.updateCalendarEvents();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateCalendarEvents() {\n    const date = moment().format('YYYY-MM-DDT');\n    this.retrieveEvents(date);\n  }\n\n  retrieveEvents(date) {\n    var xhr = new XMLHttpRequest(); // callback when the server responds\n\n    xhr.addEventListener('load', () => {\n      // return http response\n      console.log(\"retreiveEvents: HTTP response from Google Calendar API retreived.\");\n      this.parseResponse(JSON.parse(xhr.responseText));\n    });\n    xhr.open('GET', 'https://www.googleapis.com/calendar/v3/calendars' + '/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com' + '/events?orderBy=startTime&singleEvents=true&timeMin=' + date + '00:00:00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ');\n    xhr.send();\n  }\n\n  parseResponse(eventData) {\n    let calendarEvents = [];\n    let oneMonthForward = moment().add(1, 'months');\n    let allEvents = eventData.items; // Iterate the events and parse data\n\n    for (let i = 0; i < allEvents.length; i++) {\n      let event = allEvents[i]; // Check if full day event (different prop name)\n\n      let currentStartDate, currentEndDate;\n\n      if (event.start.date) {\n        // full day event\n        currentStartDate = moment(event.start.date);\n        currentEndDate = moment(event.end.date);\n      } else {\n        // non-full day event\n        currentStartDate = moment(event.start.dateTime);\n        currentEndDate = moment(event.end.dateTime);\n      } // Exit if currentStartDate is out of display range (one month forward)\n\n\n      if (currentStartDate.isAfter(oneMonthForward)) {\n        console.log(\"parseResponse: Exited for loop at event \" + i);\n        break;\n      }\n\n      if (event.summary == 'Lucifer release party') {\n        console.log(event);\n        console.log(currentStartDate, moment(event.end.dateTime));\n      }\n\n      calendarEvents.push({\n        start: currentStartDate,\n        end: currentEndDate,\n        title: event.summary,\n        description: event.description ? event.description : '',\n        location: event.location ? event.location : ''\n      });\n    } // Update state with new events\n\n\n    this.setState({\n      events: calendarEvents\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: style.calendarContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      localizer: localizer,\n      toolbar: false,\n      events: this.state.events,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      style: style.calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js"],"names":["React","Calendar","momentLocalizer","moment","localizer","style","calendarContainer","textAlign","width","padding","marginTop","calendar","height","fontSize","CalendarViewer","Component","constructor","props","state","events","componentDidMount","timerID","setInterval","updateCalendarEvents","componentWillUnmount","clearInterval","date","format","retrieveEvents","xhr","XMLHttpRequest","addEventListener","console","log","parseResponse","JSON","parse","responseText","open","send","eventData","calendarEvents","oneMonthForward","add","allEvents","items","i","length","event","currentStartDate","currentEndDate","start","end","dateTime","isAfter","summary","push","title","description","location","setState","render","Date"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\";\n\n// change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\n\nconst style = {\n    calendarContainer: {\n        textAlign: 'center',\n        width: '100%',\n        padding: '3%',\n        marginTop: '7%'\n    },\n    calendar: {\n        height: '55vh',\n        fontSize: 15\n    }\n}\n/**\n * Component updates every minute\n */\nexport default class CalendarViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: []\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.updateCalendarEvents(),\n            60 * 1000\n        );\n        this.updateCalendarEvents();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    updateCalendarEvents() {\n        const date = moment().format('YYYY-MM-DDT');\n        this.retrieveEvents(date);        \n    }\n\n    retrieveEvents(date) {\n        var xhr = new XMLHttpRequest()\n\n        // callback when the server responds\n        xhr.addEventListener('load', () => {\n            // return http response\n            console.log(\"retreiveEvents: HTTP response from Google Calendar API retreived.\");\n            this.parseResponse(JSON.parse(xhr.responseText));\n        })\n\n        xhr.open('GET', \n                 'https://www.googleapis.com/calendar/v3/calendars' +\n                 '/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com' + \n                 '/events?orderBy=startTime&singleEvents=true&timeMin='+ date + \n                 '00:00:00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ')\n\n        xhr.send()\n    }\n\n    parseResponse(eventData) {\n        let calendarEvents = [];\n        let oneMonthForward = moment().add(1, 'months');\n        let allEvents = eventData.items;\n\n        // Iterate the events and parse data\n        for (let i = 0; i < allEvents.length; i++) {\n            let event = allEvents[i];\n\n            // Check if full day event (different prop name)\n            let currentStartDate, currentEndDate;\n            if (event.start.date) {\n                // full day event\n                currentStartDate = moment(event.start.date);\n                currentEndDate = moment(event.end.date);\n            } else {\n                // non-full day event\n                currentStartDate = moment(event.start.dateTime);\n                currentEndDate = moment(event.end.dateTime);\n            }\n\n            // Exit if currentStartDate is out of display range (one month forward)\n            if (currentStartDate.isAfter(oneMonthForward)) {\n                console.log(\"parseResponse: Exited for loop at event \" + i);\n                break;\n            }\n\n            if (event.summary == 'Lucifer release party') {\n                console.log(event);\n                console.log(currentStartDate, moment(event.end.dateTime))\n            }\n        \n            calendarEvents.push({\n                start: currentStartDate,\n                end: currentEndDate,\n                title: event.summary,\n                description: event.description ? event.description : '',\n                location: event.location ? event.location : ''\n            });\n        }\n\n        // Update state with new events\n        this.setState({ events: calendarEvents });\n\n    }\n\n    render() {\n        return (\n            <div style={style.calendarContainer}>\n                <Calendar\n                localizer={localizer}\n                toolbar={false}\n                events={this.state.events}\n                defaultDate={new Date()}\n                defaultView=\"month\"\n                style={style.calendar}\n                />\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}