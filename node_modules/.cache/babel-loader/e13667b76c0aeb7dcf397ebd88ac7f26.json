{"ast":null,"code":"var _jsxFileName = \"/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js\";\nimport React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\"; // change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\nconst style = {\n  calendarContainer: {\n    textAlign: 'center',\n    width: '100%',\n    padding: '3%',\n    marginTop: '7%'\n  },\n  calendar: {\n    height: '55vh',\n    fontSize: 20\n  }\n};\n/**\n * Component updates every minute\n */\n\nexport default class CalendarViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [{\n        start: moment(),\n        end: moment().add(1, \"days\"),\n        title: \"Some title\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.tick(), 60 * 1000);\n    /*\n    // create a new XMLHttpRequest\n    var xhr = new XMLHttpRequest()\n     // get a callback when the server responds\n    xhr.addEventListener('load', () => {\n    // update the state of the component with the result here\n    console.log(xhr.responseText)\n    })\n    // open the request with the verb and the url\n    xhr.open('GET', 'https://dog.ceo/api/breeds/list/all')\n    // send the request\n    xhr.send()\n    */\n\n    console.log(moment().toISOString().tz('Europe/Stockholm'));\n    console.log(moment().format()); //console.log(moment().toISOString(keepOffset));\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  tick() {\n    this.forceUpdate();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: style.calendarContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      localizer: localizer,\n      toolbar: false,\n      events: this.state.events,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      style: style.calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js"],"names":["React","Calendar","momentLocalizer","moment","localizer","style","calendarContainer","textAlign","width","padding","marginTop","calendar","height","fontSize","CalendarViewer","Component","constructor","props","state","events","start","end","add","title","componentDidMount","timerID","setInterval","tick","console","log","toISOString","tz","format","componentWillUnmount","clearInterval","forceUpdate","render","Date"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,eAAnB,QAA0C,oBAA1C;AACA,OAAO,mDAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAO,iBAAP,C,CAEA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAGF,eAAe,CAACC,MAAD,CAAjC;AAEA,MAAME,KAAK,GAAG;AACVC,EAAAA,iBAAiB,EAAE;AACfC,IAAAA,SAAS,EAAE,QADI;AAEfC,IAAAA,KAAK,EAAE,MAFQ;AAGfC,IAAAA,OAAO,EAAE,IAHM;AAIfC,IAAAA,SAAS,EAAE;AAJI,GADT;AAOVC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,MAAM,EAAE,MADF;AAENC,IAAAA,QAAQ,EAAE;AAFJ;AAPA,CAAd;AAYA;;;;AAGA,eAAe,MAAMC,cAAN,SAA6Bd,KAAK,CAACe,SAAnC,CAA6C;AACxDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,CACJ;AACEC,QAAAA,KAAK,EAAEjB,MAAM,EADf;AAEEkB,QAAAA,GAAG,EAAElB,MAAM,GAAGmB,GAAT,CAAa,CAAb,EAAgB,MAAhB,CAFP;AAGEC,QAAAA,KAAK,EAAE;AAHT,OADI;AADC,KAAb;AASH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,OAAL,GAAeC,WAAW,CACtB,MAAM,KAAKC,IAAL,EADgB,EAEtB,KAAK,IAFiB,CAA1B;AAIA;;;;;;;;;;;;;;AAcAC,IAAAA,OAAO,CAACC,GAAR,CAAY1B,MAAM,GAAG2B,WAAT,GAAuBC,EAAvB,CAA0B,kBAA1B,CAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY1B,MAAM,GAAG6B,MAAT,EAAZ,EApBgB,CAqBhB;AACH;;AACDC,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,aAAa,CAAC,KAAKT,OAAN,CAAb;AACH;;AACDE,EAAAA,IAAI,GAAG;AACH,SAAKQ,WAAL;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,KAAK,EAAE/B,KAAK,CAACC,iBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AACA,MAAA,SAAS,EAAEF,SADX;AAEA,MAAA,OAAO,EAAE,KAFT;AAGA,MAAA,MAAM,EAAE,KAAKc,KAAL,CAAWC,MAHnB;AAIA,MAAA,WAAW,EAAE,IAAIkB,IAAJ,EAJb;AAKA,MAAA,WAAW,EAAC,OALZ;AAMA,MAAA,KAAK,EAAEhC,KAAK,CAACM,QANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAYH;;AAvDuD","sourcesContent":["import React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\";\n\n// change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\n\nconst style = {\n    calendarContainer: {\n        textAlign: 'center',\n        width: '100%',\n        padding: '3%',\n        marginTop: '7%'\n    },\n    calendar: {\n        height: '55vh',\n        fontSize: 20\n    }\n}\n/**\n * Component updates every minute\n */\nexport default class CalendarViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: [\n                {\n                  start: moment(),\n                  end: moment().add(1, \"days\"),\n                  title: \"Some title\"\n                }\n            ]\n        }\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            60 * 1000\n        );\n        /*\n        // create a new XMLHttpRequest\n        var xhr = new XMLHttpRequest()\n\n        // get a callback when the server responds\n        xhr.addEventListener('load', () => {\n        // update the state of the component with the result here\n        console.log(xhr.responseText)\n        })\n        // open the request with the verb and the url\n        xhr.open('GET', 'https://dog.ceo/api/breeds/list/all')\n        // send the request\n        xhr.send()\n        */\n        console.log(moment().toISOString().tz('Europe/Stockholm'));\n        console.log(moment().format());\n        //console.log(moment().toISOString(keepOffset));\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    tick() {\n        this.forceUpdate();\n    }\n    render() {\n        return (\n            <div style={style.calendarContainer}>\n                <Calendar\n                localizer={localizer}\n                toolbar={false}\n                events={this.state.events}\n                defaultDate={new Date()}\n                defaultView=\"month\"\n                style={style.calendar}\n                />\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}