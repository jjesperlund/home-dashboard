{"ast":null,"code":"var _jsxFileName = \"/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js\";\nimport React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\"; // change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\nconst style = {\n  calendarContainer: {\n    textAlign: 'center',\n    width: '100%',\n    padding: '3%',\n    marginTop: '7%'\n  },\n  calendar: {\n    height: '55vh',\n    fontSize: 20\n  }\n};\n/**\n * Component updates every minute\n */\n\nexport default class CalendarViewer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: [{\n        start: moment(),\n        end: moment().add(1, \"days\"),\n        title: \"Some title\"\n      }]\n    };\n  }\n\n  componentDidMount() {\n    this.timerID = setInterval(() => this.updateCalendarEvents(), 60 * 1000);\n    this.updateCalendarEvents();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  updateCalendarEvents() {\n    const date = moment().format('YYYY-MM-DDT');\n    this.retrieveEvents(date);\n  }\n\n  retrieveEvents(date) {\n    var xhr = new XMLHttpRequest(); // callback when the server responds\n\n    xhr.addEventListener('load', () => {\n      // return http response\n      console.log(\"HTTP response from Google Calendar API retreived.\");\n      this.parseResponse(JSON.parse(xhr.responseText));\n    });\n    xhr.open('GET', 'https://www.googleapis.com/calendar/v3/calendars' + '/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com' + '/events?orderBy=startTime&singleEvents=true&timeMin=' + date + '00:00:00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ');\n    xhr.send();\n  }\n\n  parseResponse(eventData) {\n    let events = [];\n    let oneMonthForward = moment().add(1, 'months');\n    console.log(moment(eventData.items[0].start.dateTime));\n    eventData.items.forEach(event => {\n      events.push({\n        start: event.start.dateTime,\n        end: event.end.dateTime,\n        title: event.summary,\n        description: event.description ? event.description : '',\n        location: event.location ? event.location : ''\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      style: style.calendarContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Calendar, {\n      localizer: localizer,\n      toolbar: false,\n      events: this.state.events,\n      defaultDate: new Date(),\n      defaultView: \"month\",\n      style: style.calendar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jesperlund/Documents/Web Programming/home_dashboard/src/CalendarViewer.js"],"names":["React","Calendar","momentLocalizer","moment","localizer","style","calendarContainer","textAlign","width","padding","marginTop","calendar","height","fontSize","CalendarViewer","Component","constructor","props","state","events","start","end","add","title","componentDidMount","timerID","setInterval","updateCalendarEvents","componentWillUnmount","clearInterval","date","format","retrieveEvents","xhr","XMLHttpRequest","addEventListener","console","log","parseResponse","JSON","parse","responseText","open","send","eventData","oneMonthForward","items","dateTime","forEach","event","push","summary","description","location","render","Date"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\nimport moment from 'moment';\nimport \"moment-timezone\";\n\n// change timeMin to moment() in correct format\n// limit 1,000,000 queries per day\n// https://www.googleapis.com/calendar/v3/calendars/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com/events?orderBy=startTime&singleEvents=true&timeMin=2020-03-09T00%3A00%3A00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ\n\nconst localizer = momentLocalizer(moment);\n\nconst style = {\n    calendarContainer: {\n        textAlign: 'center',\n        width: '100%',\n        padding: '3%',\n        marginTop: '7%'\n    },\n    calendar: {\n        height: '55vh',\n        fontSize: 20\n    }\n}\n/**\n * Component updates every minute\n */\nexport default class CalendarViewer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            events: [\n                {\n                  start: moment(),\n                  end: moment().add(1, \"days\"),\n                  title: \"Some title\"\n                }\n            ]\n        }\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.updateCalendarEvents(),\n            60 * 1000\n        );\n        this.updateCalendarEvents();\n    }\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n    updateCalendarEvents() {\n        const date = moment().format('YYYY-MM-DDT');\n        this.retrieveEvents(date);        \n    }\n    retrieveEvents(date) {\n        var xhr = new XMLHttpRequest()\n\n        // callback when the server responds\n        xhr.addEventListener('load', () => {\n            // return http response\n            console.log(\"HTTP response from Google Calendar API retreived.\");\n            this.parseResponse(JSON.parse(xhr.responseText));\n        })\n\n        xhr.open('GET', \n                 'https://www.googleapis.com/calendar/v3/calendars' +\n                 '/pucmdvv6j7fc64134iko1m5tikogf0vt%40import.calendar.google.com' + \n                 '/events?orderBy=startTime&singleEvents=true&timeMin='+ date + \n                 '00:00:00Z&key=AIzaSyACLULMDg-fww_3dBDwU-0ERXGMrHcTfHQ')\n\n        xhr.send()\n    }\n    parseResponse(eventData) {\n        let events = [];\n        let oneMonthForward = moment().add(1, 'months');\n        console.log(moment(eventData.items[0].start.dateTime))\n        eventData.items.forEach((event) => {\n            events.push({\n                start: event.start.dateTime,\n                end: event.end.dateTime,\n                title: event.summary,\n                description: event.description ? event.description : '',\n                location: event.location ? event.location : ''\n            });\n            \n        });\n    }\n    render() {\n        return (\n            <div style={style.calendarContainer}>\n                <Calendar\n                localizer={localizer}\n                toolbar={false}\n                events={this.state.events}\n                defaultDate={new Date()}\n                defaultView=\"month\"\n                style={style.calendar}\n                />\n            </div>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}